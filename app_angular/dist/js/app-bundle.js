angular.module("myApp",["ui.bootstrap","ui.bootstrap.datetimepicker"]).constant("CONSTS",{TIMEFILTER:{ALL:0,FINISHED:1,NEXT:2}}),function(){"use strict";function e(e){var t=this;e.nextCall={},e.callList=[{name:"Sam Tailor",phone:"00420 121 242 343",time:1288323623006},{name:"Tom Henks",phone:"00420 121 242 555",time:1248329626002}],t.render=function(){var n=localStorage.getItem("list");n&&(e.callList=angular.fromJson(n),t.findNextCall())},t.saveData=function(n){e.callList.push(n),t.updateData()},t.removeItem=function(n){_.remove(e.callList,{time:n}),t.updateData()},t.updateData=function(){localStorage.setItem("list",angular.toJson(e.callList)),t.findNextCall()},t.findNextCall=function(){var t,n=e.callList,a=(new Date).getTime();t=_.sortBy(n,"time"),t=_.find(t,function(e){return e.time>=a}),e.nextCall=t},t.render()}angular.module("myApp").controller("MainController",e),e.$inject=["$scope"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"js/directives/addCall/tpl.html",controller:"MainController",link:function(e,t,n,a){e.name="",e.nameMaxLength=30,e.phone="",e.phonePattern="(\\+|00)(\\(?\\d{3}\\)?-?)(\\s?\\d{3}){3}",e.time="",e.timePickerIsOpen=!1,e.timePattern="([01]\\d|2[0-3]):?([0-5]\\d)",e.timeOptions={readonlyInput:!1,showMeridian:!1},e.openCalendar=function(){e.timePickerIsOpen=!0},e.addCall=function(){var t={};e.name&&e.phone&&e.time&&(e.phone=e.convertPhone(e.phone),t={name:e.name,phone:e.phone,time:e.time.getTime()},a.saveData(t),e.reset())},e.reset=function(){e.name="",e.phone="",e.time="",e.addCallForm.$setPristine(),e.addCallForm.$setValidity(),e.addCallForm.$setUntouched()},e.convertPhone=function(e){var t=e;return t=t.replace(/\(|\)|-| /g,""),t=t.replace(/\+/g,"00"),t.slice(0,5)+" "+t.slice(5,8)+" "+t.slice(8,11)+" "+t.slice(11)}}}}angular.module("myApp").directive("addCallForm",e)}(),function(){"use strict";function e(e){return{restrict:"E",templateUrl:"js/directives/callList/tpl.html",link:function(t){t.predicate="time",t.reverse=!1,t.order=function(e){t.reverse=t.predicate===e&&!t.reverse,t.predicate=e},t.timeInPast=function(e){var t=(new Date).getTime();return e<=t},t.timeFilter=e.TIMEFILTER.ALL,t.setTimeFilter=function(e){t.timeFilter=e},t.toogleView=function(n){var a=(new Date).getTime(),l=t.timeFilter;return!(l===e.TIMEFILTER.FINISHED&&n>=a||l===e.TIMEFILTER.NEXT&&n<a)}}}}angular.module("myApp").directive("callList",e),e.$inject=["CONSTS"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"js/directives/nextCall/tpl.html"}}angular.module("myApp").directive("nextCall",e)}(),angular.module("myApp").run(["$templateCache",function(e){e.put("js/directives/addCall/tpl.html",'<div class="item add-item">\n    <h3 class="text-center">Add call</h3>\n    <form name="addCallForm" data-ng-submit="addCall()" novalidate>\n        <div class="wrapper row">\n            <div class="form-group col-md-4">\n                <label class="sr-only" for="field-2-1">Name *</label>\n                <input type="text" name="userName" class="form-control" ng-model="name" placeholder="Name" ng-maxlength="nameMaxLength" required>\n                <span class="error-message" ng-show="addCallForm.$submitted || addCallForm.userName.$touched">\n                    <span ng-show="addCallForm.userName.$error.maxlength">Name should not be longer than {{nameMaxLength}}</span>\n                <span ng-show="addCallForm.userName.$error.required">Enter contact name</span>\n                </span>\n            </div>\n            <div class="form-group col-md-5">\n                <label class="sr-only" for="field-2-2">Phone *</label>\n                <input type="text" name="userPhone" class="form-control" ng-model="phone" placeholder="Phone" ng-pattern="phonePattern" required>\n                <span class="error-message" ng-show="addCallForm.$submitted || addCallForm.userPhone.$touched">\n                    <span ng-show="addCallForm.userPhone.$error.pattern">Example of correct phone: <br>+(420) 111 222 333</span>\n                <span ng-show="addCallForm.userPhone.$error.required">Enter phone</span>\n                </span>\n            </div>\n            <div class="form-group col-md-3">\n                <label class="sr-only" for="timepicker">Time *</label>\n                <input type="text" name="userTime" class="form-control" id="timepicker" placeholder="Time" ng-model="time" ng-pattern="timePattern"\n                    datetime-picker="HH:mm" is-open="timePickerIsOpen" enable-date="false" timepicker-options="timeOptions" close-on-selection="true"\n                    ng-click="openCalendar()" required>\n                <span class="error-message" ng-show="addCallForm.$submitted || addCallForm.userTime.$touched">\n                    <span ng-show="addCallForm.userTime.$error.datetime">Exaple of correct time: 21:45</span>\n                    <span ng-show="addCallForm.userTime.$error.required">Enter time</span>\n                </span>\n            </div>\n        </div>\n        <p class="text-right">\n            <input type="submit" class="btn btn-default" value="+ add" id="add-button">\n        </p>\n    </form>\n</div>'),e.put("js/directives/callList/tpl.html",'<div class="item list-item">\n    <h3 class="text-center">List of calls</h3>\n    <table class="table table-bordered table-hover">\n        <thead>\n            <tr class="active">\n                <th ng-click="order(\'name\')">\n                    Name\n                    <span class="sortorder" ng-show="predicate === \'name\'" ng-class="{reverse:reverse}"></span>\n                </th>\n                <th>Phone Number</th>\n                <th ng-click="order(\'time\')">\n                    Time\n                    <span class="sortorder" ng-show="predicate === \'time\'" ng-class="{reverse:reverse}"></span>\n                </th>\n                <th>Action</th>\n                <th>Finished</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr ng-repeat="item in callList | orderBy:predicate:reverse track by $index" ng-show="toogleView(item.time)">\n                <td>{{item.name}}</td>\n                <td>{{item.phone}}</td>\n                <td>{{item.time | date:\'HH:mm\'}}</td>\n                <td><a href="" ng-click="MainCtrl.removeItem(item.time)">delete</a></td>\n                <td><input type="checkbox" name="viwed" ng-checked="timeInPast(item.time)" disabled ></td>\n            </tr>\n        </tbody>\n    </table>\n    <p class="text-center">\n        <a class="btn btn-default" href="" role="button" title="all" ng-click="setTimeFilter(\'all\')">All</a>\n        <a class="btn btn-default" href="" role="button" title="next" ng-click="setTimeFilter(\'next\')">Next</a>\n        <a class="btn btn-default" href="" role="button" title="finished" ng-click="setTimeFilter(\'finished\')">Finished</a>\n    </p>\n</div>'),e.put("js/directives/nextCall/tpl.html",'<div class="item next-item">\n    <h3 class="text-center">Next call</h3>\n    <form>\n        <div class="row">\n            <div class="form-group col-md-4">\n                <label class="sr-only" for="field-1-1">Name</label>\n                <input type="text" name="user-name" class="form-control" id="field-1-1" value="{{nextCall.name}}" placeholder="Name" readonly>\n            </div>\n            <div class="form-group col-md-5">\n                <label class="sr-only" for="field-1-2">Phone</label>\n                <input type="text" name="user-phone" class="form-control" id="field-1-2" value="{{nextCall.phone}}" placeholder="Phone" readonly>\n            </div>\n            <div class="form-group col-md-3">\n                <label class="sr-only" for="field-1-3">Time</label>\n                <input type="text" name="user-time" class="form-control" id="field-1-3" value="{{nextCall.time | date:\'HH:mm\'}}" placeholder="Time" readonly>\n            </div>\n        </div>\n    </form>\n\n</div>')}]);
//# sourceMappingURL=data:application/json;base64,
