// set angular module and dependency
(function () {
    angular.module('myApp', ['ui.bootstrap', 'ui.bootstrap.datetimepicker']);
})();

(function () {
    'use strict';

    angular
        .module('myApp')
        .controller('MainController', ["$scope", "$rootScope", function ($scope, $rootScope) {

            var vm = this;

            $rootScope.callList = [
                {
                    name: 'Sam Tailor',
                    phone: '00420 121 242 333',
                    time: 1288323623006
                },
                {
                    name: 'Tom Henks',
                    phone: '00420 121 242 555',
                    time: 1248329626002
                }
            ];
            vm.render = function () {
                var localData = localStorage.getItem('list');
                if (localData) {
                    $rootScope.callList = angular.fromJson(localData);
                    vm.findNextCall();
                }
            }
            vm.saveData = function (entry) {
                $rootScope.callList.push(entry);
                vm.updateData();
            }
            vm.removeItem = function (time) {
                // remove by time becouse it is unique for each data item
                _.remove($rootScope.callList, { 'time': time });
                vm.updateData();
            };
            vm.updateData = function () {
                localStorage.setItem('list', angular.toJson($rootScope.callList));
                vm.findNextCall();
            }
            $rootScope.nextCall = {};
            vm.findNextCall = function () {
                var allData = $rootScope.callList,
                    result,
                    currentTime = new Date().getTime();

                result = _.sortBy(allData, 'time'); // firstly sort all data by time
                result = _.find(result, function (item) {  // then find first near future item
                    return item.time >= currentTime;
                });

                $rootScope.nextCall = result;
            }

            // init app
            vm.render();
        }]);

})();
(function () {
    'use strict';

    angular
        .module('myApp')
        .directive('addCallForm', function () {
            return {
                restrict: 'E',
                templateUrl: 'js/directives/addCall/tpl.html',
                controller: 'MainController',
                link: function ($scope, element, attrs, ctrl) {
                    $scope.name = '';
                    $scope.nameMaxLength = 30;
                    $scope.phone = '';
                    $scope.phonePattern = '(\\+|00)(\\(?\\d{3}\\)?-?)(\\s?\\d{3}){3}';

                    // timePicker params
                    $scope.time = '';
                    $scope.timePickerIsOpen = false;
                    $scope.timePattern = '([01]\\d|2[0-3]):?([0-5]\\d)';
                    $scope.timeOptions = {
                        readonlyInput: false,
                        showMeridian: false
                    };
                    $scope.openCalendar = function () {
                        $scope.timePickerIsOpen = true;
                    };
                    //end timePicker params

                    $scope.addCall = function () {
                        var newCall = {};

                        if ($scope.name && $scope.phone && $scope.time) {

                            $scope.phone = $scope.convertPhone($scope.phone);

                            newCall = {
                                name: $scope.name,
                                phone: $scope.phone,
                                time: $scope.time.getTime() //parse date to store in miliseconds
                            }
                            ctrl.saveData(newCall);
                            $scope.reset();
                        }
                    }

                    $scope.reset = function () {
                        //reset fields data
                        $scope.name = '';
                        $scope.phone = '';
                        $scope.time = '';

                        //reset form validation
                        $scope.addCallForm.$setPristine();
                        $scope.addCallForm.$setValidity();
                        $scope.addCallForm.$setUntouched();
                    }

                    $scope.convertPhone = function (phone_number) {
                        var result = phone_number;

                        //convert to this line 00XXX XXX XXX XXX
                        result = result.replace(/\(|\)|-| /g, "");
                        result = result.replace(/\+/g, "00");

                        return result.slice(0, 5) + ' ' + result.slice(5, 8) + ' ' + result.slice(8, 11) + ' ' + result.slice(11);
                    }
                }
            }
        })
})();
(function () {
    'use strict';

    angular
        .module('myApp')
        .directive('callList', function () {
            return {
                restrict: 'E',
                templateUrl: 'js/directives/callList/tpl.html',
                link: function ($scope) {

                    $scope.predicate = 'time';
                    $scope.reverse = false;
                    $scope.order = function (predicate) {
                        $scope.reverse = ($scope.predicate === predicate) ? !$scope.reverse : false;
                        $scope.predicate = predicate;
                    };

                    $scope.timeInPast = function (time) {
                        var currentTime = new Date().getTime();

                        return (time <= currentTime) ? true : false;
                    }

                    // timeViewFilter
                    $scope.timeFilter = 'all'; // also can be future or past
                    $scope.setTimeFilter = function (value) {
                        $scope.timeFilter = value;
                    };
                    $scope.toogleView = function (time) {
                        var currentTime = new Date().getTime(),
                            timeFilter = $scope.timeFilter;

                        if ((timeFilter === 'finished' && time >= currentTime) || // for finished filter we hide future items
                            (timeFilter === 'next' && time < currentTime)) {  // for next filter we will do revert

                            return false;
                        } else {
                            return true; // for all we show all items
                        }
                    }
                }
            }
        })
})();
(function () {
    'use strict';

    angular
        .module('myApp')
        .directive('nextCall', function () {
            return {
                restrict: 'E',
                templateUrl: 'js/directives/nextCall/tpl.html'
            }
        })
})();
angular.module('myApp').run(['$templateCache', function($templateCache) {$templateCache.put('js/directives/addCall/tpl.html','<div class="item add-item">\n    <h3 class="text-center">Add call</h3>\n    <form name="addCallForm" data-ng-submit="addCall()" novalidate>\n        <div class="wrapper row">\n            <div class="form-group col-md-4">\n                <label class="sr-only" for="field-2-1">Name *</label>\n                <input type="text" name="userName" class="form-control" ng-model="name" placeholder="Name" ng-maxlength="nameMaxLength" required>\n                <span class="error-message" ng-show="addCallForm.$submitted || addCallForm.userName.$touched">\n                    <span ng-show="addCallForm.userName.$error.maxlength">Name should not be longer than {{nameMaxLength}}</span>\n                <span ng-show="addCallForm.userName.$error.required">Enter contact name</span>\n                </span>\n            </div>\n            <div class="form-group col-md-5">\n                <label class="sr-only" for="field-2-2">Phone *</label>\n                <input type="text" name="userPhone" class="form-control" ng-model="phone" placeholder="Phone" ng-pattern="phonePattern" required>\n                <span class="error-message" ng-show="addCallForm.$submitted || addCallForm.userPhone.$touched">\n                    <span ng-show="addCallForm.userPhone.$error.pattern">Example of correct phone: +(420) 111 222 333</span>\n                <span ng-show="addCallForm.userPhone.$error.required">Enter phone</span>\n                </span>\n            </div>\n            <div class="form-group col-md-3">\n                <label class="sr-only" for="timepicker">Time *</label>\n                <input type="text" name="userTime" class="form-control" id="timepicker" placeholder="Time" ng-model="time" ng-pattern="timePattern"\n                    datetime-picker="HH:mm" is-open="timePickerIsOpen" enable-date="false" timepicker-options="timeOptions" close-on-selection="true"\n                    ng-click="openCalendar()" required>\n                <span class="error-message" ng-show="addCallForm.$submitted || addCallForm.userTime.$touched">\n                    <span ng-show="addCallForm.userTime.$error.datetime">Exaple of correct time: 21:45</span>\n                    <span ng-show="addCallForm.userTime.$error.required">Enter time</span>\n                </span>\n            </div>\n        </div>\n        <p class="text-right">\n            <input type="submit" class="btn btn-default" value="+ add" id="add-button">\n        </p>\n    </form>\n</div>');
$templateCache.put('js/directives/callList/tpl.html','<div class="item list-item">\n    <h3 class="text-center">List of calls</h3>\n    <table class="table table-bordered table-hover">\n        <thead>\n            <tr class="active">\n                <th ng-click="order(\'name\')">\n                    Name\n                    <span class="sortorder" ng-show="predicate === \'name\'" ng-class="{reverse:reverse}"></span>\n                </th>\n                <th>Phone Number</th>\n                <th ng-click="order(\'time\')">\n                    Time\n                    <span class="sortorder" ng-show="predicate === \'time\'" ng-class="{reverse:reverse}"></span>\n                </th>\n                <th>Action</th>\n                <th>Finished</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr ng-repeat="item in callList | orderBy:predicate:reverse track by $index" ng-show="toogleView(item.time)">\n                <td>{{item.name}}</td>\n                <td>{{item.phone}}</td>\n                <td>{{item.time | date:\'HH:mm\'}}</td>\n                <td><a href="" ng-click="MainCtrl.removeItem(item.time)">delete</a></td>\n                <td><input type="checkbox" name="viwed" ng-checked="timeInPast(item.time)" disabled ></td>\n            </tr>\n        </tbody>\n    </table>\n    <p class="text-center">\n        <a class="btn btn-default" href="" role="button" title="all" ng-click="setTimeFilter(\'all\')">All</a>\n        <a class="btn btn-default" href="" role="button" title="next" ng-click="setTimeFilter(\'next\')">Next</a>\n        <a class="btn btn-default" href="" role="button" title="finished" ng-click="setTimeFilter(\'finished\')">Finished</a>\n    </p>\n</div>');
$templateCache.put('js/directives/nextCall/tpl.html','<div class="item next-item">\n    <h3 class="text-center">Next call</h3>\n    <form>\n        <div class="row">\n            <div class="form-group col-md-4">\n                <label class="sr-only" for="field-1-1">Name</label>\n                <input type="text" name="user-name" class="form-control" id="field-1-1" value="{{nextCall.name}}" placeholder="Name" readonly>\n            </div>\n            <div class="form-group col-md-5">\n                <label class="sr-only" for="field-1-2">Phone</label>\n                <input type="text" name="user-phone" class="form-control" id="field-1-2" value="{{nextCall.phone}}" placeholder="Phone" readonly>\n            </div>\n            <div class="form-group col-md-3">\n                <label class="sr-only" for="field-1-3">Time</label>\n                <input type="text" name="user-time" class="form-control" id="field-1-3" value="{{nextCall.time | date:\'HH:mm\'}}" placeholder="Time" readonly>\n            </div>\n        </div>\n    </form>\n\n</div>');}]);
//# sourceMappingURL=data:application/json;base64,
